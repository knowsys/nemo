//! This module defines [Symbols].

use std::sync::atomic::{AtomicUsize, Ordering};

/// Contains function useful for generating names
/// that can be used for predicates, variable names etc.
#[derive(Debug, Copy, Clone)]
pub struct Symbols {}

impl Symbols {
    /// Prefix of all generated names
    /// to distinguish them from user defined names
    const RESERVED_PREFIX: &'static str = "__";

    /// Generate a unique name.
    pub fn unique(prefix: &str) -> String {
        static COUNTER: AtomicUsize = AtomicUsize::new(0);
        let id = COUNTER.fetch_add(1, Ordering::Relaxed);

        format!("{}{prefix}{id}", Self::RESERVED_PREFIX)
    }

    /// Check whether the provided string may be confused with a string
    /// generated by [Symbols].
    pub fn is_reserved(string: &str) -> bool {
        string.starts_with(Self::RESERVED_PREFIX)
    }
}
