/*
 * Generated by cue.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TreeForTableQuery {
    #[serde(rename = "predicate")]
    pub predicate: String,
    #[serde(rename = "tableEntries", skip_serializing_if = "Option::is_none")]
    pub table_entries: Option<Box<models::TableQueryBaseTableEntries>>,
}

impl From<TreeForTableQuery> for nemo::execution::tracing::tree_query::TreeForTableQuery {
    fn from(value: TreeForTableQuery) -> Self {
        let (queries, pagination) = match value.table_entries {
            Some(entries) => (entries.queries.unwrap_or_default(), entries.pagination),
            None => (Vec::default(), None),
        };

        let pagination = pagination.map(|pagination| (*pagination).into());
        let queries = queries.into_iter().map(Into::into).collect();

        Self {
            predicate: value.predicate,
            queries,
            pagination,
        }
    }
}
