/*
 * Generated by cue.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TableEntryResponse {
    /// each table result gets some kind of id (maybe just index); this is the only way to query facts that feature nulls
    #[serde(rename = "entryId")]
    pub entry_id: usize,
    #[serde(rename = "termTuple")]
    pub term_tuple: Vec<String>,
}

impl From<TableEntryResponse> for nemo::execution::tracing::shared::TableEntryResponse {
    fn from(value: TableEntryResponse) -> Self {
        Self::new_from_string(value.entry_id, &value.term_tuple).unwrap_or(Self {
            entry_id: value.entry_id,
            terms: Vec::default(),
        })
    }
}

impl From<nemo::execution::tracing::shared::TableEntryResponse> for TableEntryResponse {
    fn from(value: nemo::execution::tracing::shared::TableEntryResponse) -> Self {
        Self {
            entry_id: value.entry_id,
            term_tuple: value.terms_string(),
        }
    }
}
