/*
 * Generated by cue.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use super::{InnerTableQueryChildInformation, TableQueryBaseTableEntries};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InnerTableQuery {
    #[serde(rename = "childInformation", skip_serializing_if = "Option::is_none")]
    pub child_information: Option<Box<InnerTableQueryChildInformation>>,
    #[serde(rename = "tableEntries", skip_serializing_if = "Option::is_none")]
    pub table_entries: Option<Box<TableQueryBaseTableEntries>>,
}

impl From<InnerTableQuery>
    for nemo::execution::tracing::node_query::TableEntriesForTreeNodesQueryInner
{
    fn from(value: InnerTableQuery) -> Self {
        let (pagination, queries) = match value.table_entries {
            Some(entries) => (entries.pagination, entries.queries.unwrap_or_default()),
            None => (None, Vec::default()),
        };

        let pagination = pagination.map(|pagination| (*pagination).into());
        let queries = queries.into_iter().map(Into::into).collect();
        let next = value.child_information.map(|info| (*info).into());

        Self {
            queries,
            pagination,
            next,
        }
    }
}
