/*
 * Generated by cue.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use super::PredicateWithParameters;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Rule {
    #[serde(rename = "id")]
    pub id: usize,
    #[serde(rename = "relevantHeadPredicate")]
    pub relevant_head_predicate: Box<PredicateWithParameters>,
    #[serde(rename = "relevantHeadPredicateIndex")]
    pub relevant_head_predicate_index: usize,
    #[serde(rename = "bodyPredicates")]
    pub body_predicates: Vec<PredicateWithParameters>,
    #[serde(rename = "stringRepresentation")]
    pub string_representation: String,
}

impl From<Rule> for nemo::execution::tracing::shared::Rule {
    fn from(value: Rule) -> Self {
        Self {
            id: value.id,
            relevant_head_predicate: (*value.relevant_head_predicate).into(),
            relevant_head_predicate_index: value.relevant_head_predicate_index,
            body_predicates: value.body_predicates.into_iter().map(Into::into).collect(),
            string_representation: value.string_representation,
        }
    }
}

impl From<nemo::execution::tracing::shared::Rule> for Rule {
    fn from(value: nemo::execution::tracing::shared::Rule) -> Self {
        Self {
            id: value.id,
            relevant_head_predicate: Box::new(value.relevant_head_predicate.into()),
            relevant_head_predicate_index: value.relevant_head_predicate_index,
            body_predicates: value.body_predicates.into_iter().map(Into::into).collect(),
            string_representation: value.string_representation,
        }
    }
}
