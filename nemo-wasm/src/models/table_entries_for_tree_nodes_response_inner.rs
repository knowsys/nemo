/*
 * Generated by cue.
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use super::{Rule, TableResponseBaseTableEntries};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TableEntriesForTreeNodesResponseInner {
    #[serde(rename = "addressInTree", skip_serializing_if = "Option::is_none")]
    pub address_in_tree: Option<Vec<usize>>,
    #[serde(rename = "predicate")]
    pub predicate: String,
    #[serde(rename = "tableEntries")]
    pub table_entries: Box<TableResponseBaseTableEntries>,
    #[serde(rename = "possibleRulesAbove")]
    pub possible_rules_above: Vec<Rule>,
    #[serde(rename = "possibleRulesBelow")]
    pub possible_rules_below: Vec<Rule>,
}

impl From<TableEntriesForTreeNodesResponseInner>
    for nemo::execution::tracing::node_query::TableEntriesForTreeNodesResponseElement
{
    fn from(value: TableEntriesForTreeNodesResponseInner) -> Self {
        let pagination = (*value.table_entries.pagination).into();
        let entries = value
            .table_entries
            .entries
            .into_iter()
            .map(Into::into)
            .collect();

        Self {
            predicate: value.predicate,
            entries,
            pagination,
            possible_rules_above: value
                .possible_rules_above
                .into_iter()
                .map(Into::into)
                .collect(),
            possible_rules_below: value
                .possible_rules_below
                .into_iter()
                .map(Into::into)
                .collect(),
            address: value.address_in_tree.unwrap_or_default(),
        }
    }
}

impl From<nemo::execution::tracing::node_query::TableEntriesForTreeNodesResponseElement>
    for TableEntriesForTreeNodesResponseInner
{
    fn from(
        value: nemo::execution::tracing::node_query::TableEntriesForTreeNodesResponseElement,
    ) -> Self {
        let table_entries = Box::new(TableResponseBaseTableEntries {
            entries: value.entries.into_iter().map(Into::into).collect(),
            pagination: Box::new(value.pagination.into()),
        });

        Self {
            address_in_tree: Some(value.address),
            predicate: value.predicate,
            table_entries,
            possible_rules_above: value
                .possible_rules_above
                .into_iter()
                .map(Into::into)
                .collect(),
            possible_rules_below: value
                .possible_rules_below
                .into_iter()
                .map(Into::into)
                .collect(),
        }
    }
}
